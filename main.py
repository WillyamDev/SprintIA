import streamlit as st
import pandas as pd
import sqlite3

# ==================== Fun√ß√µes de Banco ======================

# Conectar ao banco SQLite
def conectar_sqlite():
    try:
        conn = sqlite3.connect("banco.db")
        return conn
    except Exception as e:
        st.error(f"‚ùå Erro na conex√£o com o banco: {e}")
        return None

# Carregar dados dos pacientes
def carregar_dados_pacientes():
    try:
        conn = conectar_sqlite()
        query = """
            SELECT ID_PACIENTE, NOME, EMAIL, DATA_NASCIMENTO, TELEFONE
            FROM PACIENTE
        """
        dados = pd.read_sql_query(query, conn)
        conn.close()
        return dados
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar dados de pacientes: {e}")
        return pd.DataFrame()

# Carregar dados dos sintomas
def carregar_dados_sintoma():
    try:
        conn = conectar_sqlite()
        query = """
            SELECT DATA, ID_SINTOMA, SINTOMA_DESCRICAO, GRAVIDADE
            FROM SINTOMA
        """
        dados = pd.read_sql_query(query, conn)
        conn.close()
        return dados
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar dados de sintomas: {e}")
        return pd.DataFrame()

# ==================== Interface Streamlit ===================

st.set_page_config(page_title="Dashboard Odontol√≥gico", layout="wide")
st.title("ü¶∑ Dashboard de Predi√ß√£o - Pacientes Odontol√≥gicos")

# Carregar dados
data_pacientes = carregar_dados_pacientes()
data_sintomas = carregar_dados_sintoma()

# Processar colunas de sintomas
if not data_sintomas.empty:
    data_sintomas.columns = data_sintomas.columns.str.lower().str.strip()
else:
    st.warning("‚ö†Ô∏è Dados de sintomas n√£o carregados.")

# Mostrar dados dos pacientes
st.subheader("üìë Dados dos Pacientes")
if not data_pacientes.empty:
    st.dataframe(data_pacientes)
else:
    st.warning("‚ö†Ô∏è Nenhum dado de paciente encontrado.")

# Sele√ß√£o de sintomas
if not data_sintomas.empty and 'sintoma_descricao' in data_sintomas.columns:
    sintomas_unicos = data_sintomas['sintoma_descricao'].dropna().unique()
else:
    sintomas_unicos = []
    st.warning("‚ö†Ô∏è Sintomas n√£o encontrados no banco de dados.")

# ======================= Formul√°rio ==========================
st.header("üìù Inserir Dados para Predi√ß√£o")

data_consulta = st.text_input("Data da consulta")

sintoma = st.selectbox("Sintoma", options=sintomas_unicos)

gravidade = st.slider("Gravidade do Sintoma (1-3)", min_value=1, max_value=3, value=2)

# ======================= C√°lculo de risco =====================
def classificar_risco(gravidade):
    if gravidade == 1:
        return "Baixo"
    elif gravidade == 2:
        return "M√©dio"
    else:
        return "Alto"

risco = classificar_risco(gravidade)

st.subheader(f"üîç **Risco Calculado:** {risco}")

# ==================== Recomenda√ß√µes ===========================
recomendacoes = {
    "Dor de cabe√ßa": "üíä Tomar analg√©sico leve e repousar.",
    "Febre alta": "üå°Ô∏è Consultar um m√©dico e manter hidrata√ß√£o.",
    "N√°useas": "ü•§ Evitar alimentos gordurosos e manter hidrata√ß√£o.",
    "Cansa√ßo extremo": "üõå Descansar e verificar exames m√©dicos.",
    "Tontura": "ü©∫ Monitorar press√£o arterial e procurar aux√≠lio m√©dico se necess√°rio."
}

tratamento = recomendacoes.get(sintoma, "Nenhuma recomenda√ß√£o espec√≠fica encontrada.")
st.info(f"üí° **Recomenda√ß√£o:** {tratamento}")

if risco == "Alto":
    st.error("üö® ALTA PRIORIDADE: O paciente precisa de aten√ß√£o urgente!")
